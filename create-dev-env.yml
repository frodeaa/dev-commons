Description: |
  Create an EC2 development instance with vim, git, tmux, mosh and
  docker installed.

Parameters:

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: |
      Name of an existing EC2 KeyPair to enable SSH access to the
      instance

  InstanceType:
    Type: String
    Description: |
      EC2 instance type to use
    Default: t2.small
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large

  CidrIp:
    Type: String
    Description: |
      Specify the IPv4 CIDR range for ingress (SSH/Mosh) allowed by
      the security group added to the EC2 instance
    Default: '0.0.0.0/0'
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[0-9]))$
    ConstraintDescription: |
      must be an valid IPv4 CIDR range of the form x.x.x.x/x

  CidrIpv6:
    Type: String
    Description: |
      Specify the IPv6 CIDR range for ingress (SSH/Mosh) allowed by
      the security group added to the EC2 instance
    Default: '::/0'

  CfnBootstrapUrl:
    Type: String
    Description: URL to aws-cfn-boostrap to install
    Default: https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

  DotFilesUrl:
    Type: CommaDelimitedList
    Description: |
      URLs to dotfiles to download and add to home directory
      The files downloaded will be rename to be prefixed with '.'
    Default:
      - https://raw.githubusercontent.com/frodeaa/dev-commons/master/dotfiles/bash_aliases
      - https://raw.githubusercontent.com/frodeaa/dev-commons/master/dotfiles/gitconfig
      - https://raw.githubusercontent.com/frodeaa/dev-commons/master/dotfiles/gitignore
      - https://raw.githubusercontent.com/frodeaa/dev-commons/master/dotfiles/tmux.conf

Mappings:

  # These are the latest Ubuntu Server 18.04 LTS (HVM) as of 2018-09

  AWSRegionToAMI:
    eu-west-1:
      AMI: ami-00035f41c82244dab
    eu-central-1:
      AMI: ami-0bdf93799014acdc4

Resources:

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH/Mosh access
      SecurityGroupIngress:
        - Description: SSH
          IpProtocol: TCP
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref CidrIp
        - Description: Mosh
          IpProtocol: UDP
          FromPort: 60000
          ToPort: 61000
          CidrIp: !Ref CidrIp
        - Description: SSH
          IpProtocol: TCP
          FromPort: 22
          ToPort: 22
          CidrIpv6: !Ref CidrIpv6
        - Description: Mosh
          IpProtocol: UDP
          FromPort: 60000
          ToPort: 61000
          CidrIpv6: !Ref CidrIpv6

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref 'AWS::Region', AMI ]
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref SecurityGroup
      KeyName: !Ref KeyName
      UserData:
        # install aws-cfn-boostrap and enables cfn-hup
        # see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html
        Fn::Base64: !Sub |
          #!bin/bash -xe
          apt-get update
          apt-get -y install python-pip

          pip install '${CfnBootstrapUrl}'

          # configure cfn-hup for update-rc.d
          cp /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          chmod +x /etc/init.d/cfn-hup
          update-rc.d cfn-hup defaults

          cfn-init --resource EC2Instance \
                   --stack '${AWS::StackName}' \
                   --region '${AWS::Region}' -v

          cfn-signal --resource EC2Instance \
                     --stack '${AWS::StackName}' \
                     --region '${AWS::Region}' -e $?

    Metadata:
      AWS::CloudFormation::Init:
        # see https://garbe.io/blog/2017/01/20/install-docker-1.13-on-aws-via-cloudformation/
        # for example on how latest version of docker can be installed

        configSets:
          default:
            - config
            - install_docker
            - install_custom_dotfiles

        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
                runas=root
          packages:
            apt:
              git: []
              mosh: []
              tmux: []
              vim: []
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

        install_docker:
          commands:
            a_update_upgrade_apt_get:
              command: sudo apt-get update && sudo apt-get -y upgrade
            b_get_certificates:
              command: sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common
            c_add_docker_pgp_key:
              command: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            d_add_docker_stable_repo:
              command: sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            e_update_apt_get:
              command: sudo apt-get update
            f_install_docker:
              command: sudo apt -y install docker-ce
            g_create_service:
              command: sudo service docker start
            h_add_ubuntu_user_to_docker_group:
              command: sudo usermod -aG docker ubuntu
            i_verify_installation:
              command: sudo systemctl status docker && docker run hello-world

        install_custom_dotfiles:
          packages:
            apt:
              jg: []
           commands:
             download_dot_files:
               command: !Sub |
                 echo '${DotFilesUrl}'

    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M

Outputs:
  PublicDnsName:
    Value: !GetAtt EC2Instance.PublicDnsName

